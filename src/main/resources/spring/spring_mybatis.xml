<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://mybatis.org/schema/mybatis-spring
        http://mybatis.org/schema/mybatis-spring.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/task   
        http://www.springframework.org/schema/task/spring-task-3.0.xsd   
        http://www.springframework.org/schema/aop  
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    
    <!-- classpath: 这个是项目的根目录  等同于和java/resources/webapp 处于同一级别--> 
    <!-- 如需开启或者关闭mybatis sql日志，可以到Log4j配置文件中配置 -->   
    
	<!-- alibaba durid数据库连接配置文件加载

		**context:property-placeholder这个加载方式有些特别，它有个属性是system-properties-mode,
		默认是environment,就是先找系统属性，然后找配置文件里面的属性。所有会出现一直用计算机名去连接数据库
		的问题，所以一直连接用户是计算机名
		配置详解：   
        location="属性文件，多个之间逗号分隔"    
        file-encoding="文件编码"    
        ignore-resource-not-found="是否忽略找不到的属性文件"    
        ignore-unresolvable="是否忽略解析不到的属性，如果不忽略，找不到将抛出异常"    
        properties-ref="本地Properties配置"    
        local-override="是否本地覆盖模式，即如果true，那么properties-ref的属性将覆盖location加载的属性，否则相反"    
        system-properties-mode="系统属性模式，默认ENVIRONMENT（表示先找ENVIRONMENT，再找properties-ref/location的），
        NEVER：表示永远不用ENVIRONMENT的，OVERRIDE类似于ENVIRONMENT"    
        order="顺序"

          这个加载方式只能配置一次，不能有多个实例，如果需要添加多个配置文件，以逗号分隔
          <context:property-placeholderlocation="classpath:db.properties,classpath:monitor.properties" />
          因为我们采用的是这种配置方式，所以在引入数据库配置的时候，顺便把redis的配置文件也引进来
	-->
	<context:property-placeholder system-properties-mode="NEVER"
	location="classpath:conn.properties,classpath:redis/redis.properties"/>

	<!-- alibaba druid 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="driverClassName" value="${driverClassName}" />
		<property name="filters" value="${filters}" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${maxActive}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${initialSize}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${minIdle}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		<!-- 打开 removeAbandoned 功能 -->
		<property name="removeAbandoned" value="${removeAbandoned}" />
		<!-- 1800 秒，也就是 30 分钟 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		<!-- 关闭 abanded 连接时输出错误日志 -->
		<property name="logAbandoned" value="${logAbandoned}" />
	</bean>
	
	
	<!-- Mybatis的主要配置 这个是基于依赖 mybatis-spring -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<!-- 将数据源映射到sqlSessionFactory中 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 配置Mapper的映射路径 -->
        <property name="mapperLocations" value="classpath:cn/yarne/com/base/mapper/*.Mapper.xml" />
        <!-- 加入 mybatis配置 主要是配置一些mapper.xml内部制定的类别名等 -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />  
    </bean>
    
    <!-- Mybatis配置sqlTemplate模板，直接注入就可以引用 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory" />
    </bean>
    
    <!-- Mybatis配置接口存储的包，用来扫描mapper接口-->
    <mybatis:scan base-package="cn.yarne.com.base.mapper" />
</beans>