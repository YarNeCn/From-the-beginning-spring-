<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		 http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!--  因为redis的执行顺序在Mybatis的后面，所以我直接将redis配置文件在加载数据库配置文件的时候一块加入了  -->

	<!-- 不使用就需要注解掉，如果配置了启用注解注释，就必须要配置cacheManager 否则就会启动报错。因为配置了这个缓存拦截器就会去注入cacheManager -->
	<cache:annotation-driven />

	<!-- 配置JedisPoolConfig实例 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 连接池中最大连接数。高版本：maxTotal，低版本：maxActive -->
		<property name="maxTotal" value="${redis.maxActive}" />
		<!-- 连接池中最大空闲的连接数. -->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!-- 当连接池资源耗尽时，调用者最大阻塞的时间，超时将跑出异常。单位，毫秒数;默认为-1.表示永不超时。高版本：maxWaitMillis，低版本：maxWait -->
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<!-- testOnBorrow:向调用者输出“链接”资源时，是否检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取。默认为false。建议保持默认值. -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
		<!-- minIdle 连接池中最少空闲的连接数. -->
		<!-- testOnReturn:向连接池“归还”链接时，是否检测“链接”对象的有效性。默认为false。建议保持默认值. -->
		<!-- testWhileIdle:向调用者输出“链接”对象时，是否检测它的空闲超时；默认为false。如果“链接”空闲超时，将会被移除。建议保持默认值. -->
		<!-- whenExhaustedAction:当“连接池”中active数量达到阀值时，即“链接”资源耗尽时，连接池需要采取的手段, 默认为1(0:抛出异常。1:阻塞，直到有可用链接资源。2:强制创建新的链接资源) -->
		<!--  minEvictableIdleTimeMillis:连接空闲的最小时间，达到此值后空闲连接将可能会被移除。负值(-1)表示不移除. -->
		<!--  numTestsPerEvictionRun:对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3 -->
		<!--  timeBetweenEvictionRunsMillis:"空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1. -->
	</bean>

	<!-- 配置JedisConnectionFactory Spring提供的Redis连接工厂 -->
	<bean id="jedisConnectionFactory"
		  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">

		<property name="database" value="${redis.dbIndex}" />
		<!--    连接池配置. -->
		<property name="poolConfig" ref="poolConfig" />
		<!-- Redis服务主机. -->
		<property name="hostName" value="${redis.host}" />
		<!-- Redis服务端口号. -->
		<property name="port" value="${redis.port}" />
		<!-- password:Redis服务连接密码. -->
		<!-- timeout:连超时设置. -->
		<!-- usePool:是否使用连接池. -->
	</bean>

	<!-- 配置RedisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>


	<!-- 在这里我们只用redis来做数据库缓存，其他的不用,其他的还是用ecache -->
	<!-- 配置RedisCacheManager 用这个配置spring-data-redis必须用1.6.0 因为2.0以上版本后更新了RedisCache的执行方式-->
	<!--<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg name="redisOperations" ref="redisTemplate" />
		<property name="defaultExpiration" value="${redis.expiration}" />
	</bean>-->

	<!-- 配置RedisCacheConfig -->
	<!--<bean id="redisCacheConfig" class="cn.yarne.com.base.config.RedisCacheConfig">
		<constructor-arg ref="jedisConnectionFactory" />
		<constructor-arg ref="redisTemplate" />
		<constructor-arg ref="redisCacheManager" />
	</bean>-->
</beans>