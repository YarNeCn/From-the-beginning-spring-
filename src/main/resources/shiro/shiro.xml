<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


    <!-- 自定义域realm 用来自定义权限管理 -->
    <bean id="Users_Realm" class="cn.yarne.com.base.shiro.realm.UsersRealm">
        <!-- 每个ream都可以有不同的凭证  -->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="false"/>
    </bean>

    <!-- 用户授权/认证信息Cache, 采用EhCache  缓存 -->
    <!--<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">-->
    <!--<property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>-->
    <!--</bean>-->
    <!-- 自己封装的缓存管理器 -->
    <bean id="cacheManager" class="cn.yarne.com.base.shiro.spring.SpringCacheManagerWrapper">
        <property name="cacheManager" ref="springCacheManager"/>
    </bean>

    <!-- 安全管理器  ref对象-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="Users_Realm"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <!-- shiro filter 这里主要过滤filter的拦截 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <!-- 成功之后跳转的页面  -->
        <property name="successUrl" value="/index"/>
        <!-- 权限认证失败    没有权限认证提交的地址 -->
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="authc" value-ref="successFilter"/>
                <entry key="sysUser" value-ref="sysUserFilter"/>
                <entry key="jCaptchaValidate" value-ref="validateFilter"/>
            </util:map>
        </property>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
            <value>
                /getCode=anon <!-- 这个是获取验证码，如果不设置为游客可以访问的话会导致验证码出不来 -->
                /login = authc <!-- 登录的地址必须是authc，不然也不会执行realm而直接执行登录路径了 -->
                /login = jCaptchaValidate,authc
                /logout = logout<!--请求logout 清除session-->
                /common/**=anon <!--设置静态资源文件为游客可访问-->
                /bower_components/** = anon
                /lib/** = anon
                /static/** = anon
                /temp/** = anon
                /** = authc     <!-- 用户表示身份认证通过或通过记住我认证通过的可以访问 -->
                                <!-- /** =anon 表示所有都可以游客访问 -->
            </value>
        </property>
    </bean>

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

    <!-- 记住密码cookie管理 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <!-- 默认记住7天（单位：秒） -->
        <property name="maxAge" value="604800"/>
    </bean>

    <!-- rememberMe 管理器,启用记住密码功能 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- cipherKey是加密rememberMe Cookie的密钥；默认AES算法 -->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
        <property name="cookie" ref="rememberMeCookie" />
    </bean>

    <!-- 凭证匹配器 密码进行md5加密，输错五次之后锁定
        注册的时候密码要进行相应的加密方式
        new SimpleHash("MD5", "密码", "盐", 2).toHex(); 这个方法可以对密码进行md5加盐加密
        密文：18d756914f681685ad6161b9212570a7    md5+salt(asd)  明文 q1111111
    -->
    <bean id="credentialsMatcher" class="cn.yarne.com.base.shiro.credentials.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <!-- 这个参数用来配置记住密码这个功能 -->
        <property name="rememberMeParam" value="rememberMe"/>
        <property name="loginUrl" value="/login"/>
    </bean>

    <!-- 验证码校验 -->
    <bean id="validateFilter"
          class="cn.yarne.com.base.shiro.filter.ValidateCodeFilter">
        <property name="jcaptchaEbabled" value="true"/>
        <property name="jcaptchaParam" value="verCode"/>
        <property name="failureKeyAttribute" value="shiroLoginFailure"/>
    </bean>

    <!-- 自定义过滤器-->
    <bean id="sysUserFilter" class="cn.yarne.com.base.shiro.filter.SysUserFilter"/>
    <!-- shiro 认证成功之后的操作  -->
    <bean id="successFilter" class="cn.yarne.com.base.shiro.filter.ShiroFormFilter"/>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!--启用Shiro相关的注解-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <!-- Shiro生命周期处理器 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>